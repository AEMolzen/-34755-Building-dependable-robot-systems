
/home/local/svn/robobot/teensy_firmware_8/build/teensy_firmware_8.ino.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002060 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00024210 l    d  .fini	00000000 .fini
00024214 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20009ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
600307e0 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000012 memory_copy
60001414 l     F .text.code	0000001c memory_clear.constprop.0
60001430 l     F .text.code	0000021c ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 tempmon.c
2000e9d4 l     O .bss	00000004 s_hotCount
2000e9d8 l     O .bss	00000004 s_hotTemp
2000e9dc l     O .bss	00000004 s_hot_ROOM
2000e9e0 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 usb.c
00016908 l     F .text.itcm	00000088 schedule_transfer
00016990 l     F .text.itcm	00000036 run_callbacks
000169c8 l     F .text.itcm	00000098 endpoint0_transmit.constprop.0
2000e17c l     O .bss	00000008 endpoint0_buffer
2000e184 l     O .bss	00000004 endpoint0_notify_mask
2000cfc8 l     O .bss	00000008 endpoint0_setupdata
2000e188 l     O .bss	00000004 endpointN_notify_mask
2000e65c l     O .bss	00000008 reply_buffer
2000ec44 l     O .bss	00000001 sof_usage
2000ec4b l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 analog.c
2000ec3f l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
000000e0 l     F .text.itcm	00000000 deregister_tm_clones
000000fc l     F .text.itcm	00000000 register_tm_clones
00000120 l     F .text.itcm	00000000 __do_global_dtors_aux
2000d0e8 l       .bss	00000001 completed.1
00000148 l     F .text.itcm	00000000 frame_dummy
2000d0ec l       .bss	00000018 object.0
60002000 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 udemo_behave.cpp
000001d4 l     F .text.itcm	00000020 _GLOBAL__sub_I_dbehave
00000000 l    df *ABS*	00000000 uad.cpp
00001810 l     F .text.itcm	00000094 _GLOBAL__sub_I_ad
00000000 l    df *ABS*	00000000 uasenc.cpp
00001c58 l     F .text.itcm	00000048 _GLOBAL__sub_I_asenc
00000000 l    df *ABS*	00000000 ucommand.cpp
00001fdc l     F .text.itcm	0000002c _GLOBAL__sub_I_command
00000000 l    df *ABS*	00000000 ucurrent.cpp
000024b8 l     F .text.itcm	00000050 _GLOBAL__sub_I_current
00000000 l    df *ABS*	00000000 udisplay.cpp
0000295c l     F .text.itcm	00000040 _GLOBAL__sub_I_display
00000000 l    df *ABS*	00000000 ueeconfig.cpp
00002db8 l     F .text.itcm	00000068 EEConfig::decode(char const*) [clone .part.0]
00003100 l     F .text.itcm	00000024 _GLOBAL__sub_I_eeConfig
00000000 l    df *ABS*	00000000 uencoder.cpp
000040d4 l     F .text.itcm	00000130 _GLOBAL__sub_I_encoder
00000000 l    df *ABS*	00000000 uimu2.cpp
00004c5c l     F .text.itcm	000000a4 _GLOBAL__sub_I_imu2
00000000 l    df *ABS*	00000000 uirdist.cpp
00004d58 l     F .text.itcm	000000f0 UIrDist::estimateIrDistance() [clone .part.0]
0000518c l     F .text.itcm	00000058 _GLOBAL__sub_I_irdist
00000000 l    df *ABS*	00000000 uledband.cpp
00005ab4 l     F .text.itcm	0000004c _GLOBAL__sub_I_ledband
00000000 l    df *ABS*	00000000 ulinesensor.cpp
00006934 l     F .text.itcm	000000e0 _GLOBAL__sub_I_ls
00000000 l    df *ABS*	00000000 ulog.cpp
00007f58 l     F .text.itcm	00000058 _GLOBAL__sub_I_logger
2000264c l     O .data	00000023 CSWTCH.137
00000000 l    df *ABS*	00000000 umotor.cpp
000089ac l     F .text.itcm	00000058 _GLOBAL__sub_I_motor
00000000 l    df *ABS*	00000000 umotortest.cpp
00009e18 l     F .text.itcm	000000f8 _GLOBAL__sub_I_motortest
00000000 l    df *ABS*	00000000 urobot.cpp
0000b02c l     F .text.itcm	000000f0 _GLOBAL__sub_I_robot
00000000 l    df *ABS*	00000000 uservice.cpp
0000b45c l     F .text.itcm	0000002c _GLOBAL__sub_I_service
00000000 l    df *ABS*	00000000 uservo.cpp
0000ba4c l     F .text.itcm	0000002c _GLOBAL__sub_I_servo
00000000 l    df *ABS*	00000000 uusb.cpp
0000c854 l     F .text.itcm	00000078 _GLOBAL__sub_I_usb
00000000 l    df *ABS*	00000000 uusbhost.cpp
0000d564 l     F .text.itcm	00000024 _GLOBAL__sub_I_usbhost
00000000 l    df *ABS*	00000000 bluetooth.cpp
0000f72c l     F .text.itcm	00000024 _GLOBAL__sub_I_em_rx_tx2
00000000 l    df *ABS*	00000000 joystick.cpp
000148e4 l     F .text.itcm	00000028 _GLOBAL__sub_I_ack_rvd
2000ec37 l     O .bss	00000001 rumble_counter
2000ec38 l     O .bss	00000001 switch_packet_num
2000985c l     O .data	00000002 switch_start_input
20009860 l     O .data	00000005 xboxone_start_input
20009868 l     O .data	0000000c xbox360w_inquire_present
200026c0 l     O .data	00000006 xbox_axis_order_mapping
20008080 l     O .data	00000004 JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)::switch_bt_axis_order_mapping
20008084 l     O .data	00000020 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)::dpad_to_buttons
200080a4 l     O .data	00000006 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)::xbox_bt_axis_order_mapping
00000000 l    df *ABS*	00000000 IntervalTimer.cpp
000152b0 l     F .text.itcm	00000084 pit_isr()
00015334 l     F .text.itcm	00000020 __tcf_0
000154c8 l     F .text.itcm	0000002c _GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE
2000a080 l     O .bss	00000060 funct_table
00000000 l    df *ABS*	00000000 Adafruit_SSD1306_mod.cpp
00000854 l     F .text.itcm	00000088 Adafruit_SSD1306::drawFastHLineInternal(short, short, short, unsigned short) [clone .part.0]
000008dc l     F .text.itcm	00000160 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short) [clone .part.0]
60002060 l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::premask
60002068 l     O .text.progmem	00000008 Adafruit_SSD1306::drawFastVLineInternal(short, short, short, unsigned short)::postmask
60002070 l     O .text.progmem	000002c0 splash1_data
60002330 l     O .text.progmem	000001a0 dtu_data
600024d0 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init1
600024d4 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init2
600024d8 l     O .text.progmem	00000004 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init3
600024dc l     O .text.progmem	00000006 Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)::init5
600024e4 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1a
600024e8 l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollright(unsigned char, unsigned char)::scrollList1b
600024ec l     O .text.progmem	00000002 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2a
600024f0 l     O .text.progmem	00000003 Adafruit_SSD1306::startscrollleft(unsigned char, unsigned char)::scrollList2b
600024f4 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3a
600024f8 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3b
600024fc l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagright(unsigned char, unsigned char)::scrollList3c
60002500 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4a
60002504 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4b
60002508 l     O .text.progmem	00000002 Adafruit_SSD1306::startscrolldiagleft(unsigned char, unsigned char)::scrollList4c
00000000 l    df *ABS*	00000000 usb_desc.c
200098dc l     O .data	00000012 device_descriptor
20009b0c l     O .data	00000028 microsoft_os_compatible_id_desc
20009b34 l     O .data	00000012 microsoft_os_string_desc
600026f8 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 interrupt.c
00015f1c l     F .text.itcm	00000002 dummy_isr
20002670 l     O .data	00000014 CSWTCH.6
00000000 l    df *ABS*	00000000 teensy_firmware_8.ino.cpp
00000000 l    df *ABS*	00000000 AS5X47.cpp
00000000 l    df *ABS*	00000000 AS5X47Spi.cpp
00000000 l    df *ABS*	00000000 usubs.cpp
00000000 l    df *ABS*	00000000 usubss.cpp
00000000 l    df *ABS*	00000000 ADC.cpp
00000000 l    df *ABS*	00000000 ADC_Module.cpp
00000000 l    df *ABS*	00000000 MPU9250_asukiaaa.cpp
00000000 l    df *ABS*	00000000 Adafruit_GFX.cpp
200026c8 l     O .data	00000500 font
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 BluetoothConnection.cpp
00000000 l    df *ABS*	00000000 MassStorageDriver.cpp
00000000 l    df *ABS*	00000000 SerEMU.cpp
00000000 l    df *ABS*	00000000 adk.cpp
00000000 l    df *ABS*	00000000 antplus.cpp
00000000 l    df *ABS*	00000000 digitizer.cpp
00000000 l    df *ABS*	00000000 ehci.cpp
2000ec36 l     O .bss	00000001 port_state
2000d710 l     O .bss	00000004 active_timers
2000a000 l     O .bss	00000080 periodictable
2000d744 l     O .bss	00000100 uframe_bandwidth
2000d84c l     O .bss	00000004 async_followup_last
2000d850 l     O .bss	00000004 async_followup_first
2000d854 l     O .bss	00000004 periodic_followup_last
2000d858 l     O .bss	00000004 periodic_followup_first
2000d860 l     O .bss	00000004 rootdev
00000000 l    df *ABS*	00000000 enumeration.cpp
2000d844 l     O .bss	00000004 available_drivers
2000d85c l     O .bss	00000004 devlist
2000c7c0 l     O .bss	00000800 enumbuf
2000ec2c l     O .bss	00000002 enumlen
2000cfc0 l     O .bss	00000008 enumsetup
2000ec3e l     O .bss	00000001 USBHost::assign_address()::last_assigned_address
00000000 l    df *ABS*	00000000 hid.cpp
00010cfc l     F .text.itcm	00000048 bitfield(unsigned char const*, unsigned long, unsigned long)
200098d4 l     O .data	00000004 USBHIDParser::control(Transfer_struct const*)::ps3_feature_F4_report
00000000 l    df *ABS*	00000000 hub.cpp
00012010 l     F .text.itcm	00000148 USBHub::new_port_status(unsigned long, unsigned long) [clone .part.0]
00000000 l    df *ABS*	00000000 memory.cpp
2000a0e0 l     O .bss	00000060 memory_Pipe
2000d714 l     O .bss	00000024 memory_Device
2000d738 l     O .bss	00000004 free_Pipe_list
2000a140 l     O .bss	00000100 memory_Transfer
2000d73c l     O .bss	00000004 free_Device_list
2000d740 l     O .bss	00000004 free_strbuf_list
2000d848 l     O .bss	00000004 free_Transfer_list
00000000 l    df *ABS*	00000000 WS2812Serial.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 eeprom.c
00015a74 l     F .text.itcm	0000005c flash_wait
2000ec41 l     O .bss	00000001 initialized
2000e9e8 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.S.o
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 usb_serial.c
00017274 l     F .text.itcm	00000060 rx_queue_transfer
20200160 l     O .bss.dma	00001000 rx_buffer
000172d4 l     F .text.itcm	000000b4 rx_event
00017388 l     F .text.itcm	00000090 usb_serial_flush_callback
20201160 l     O .bss.dma	00002000 txbuffer
00017418 l     F .text.itcm	000001b8 usb_serial_write.part.0
2000e9a4 l     O .bss	00000004 rx_available
2000e9a8 l     O .bss	00000010 rx_count
2000ec42 l     O .bss	00000001 rx_head
2000e9b8 l     O .bss	00000010 rx_index
2000e9c8 l     O .bss	00000009 rx_list
2000ec30 l     O .bss	00000002 rx_packet_size
2000ec43 l     O .bss	00000001 rx_tail
2000a280 l     O .bss	00000100 rx_transfer
2000ec45 l     O .bss	00000001 transmit_previous_timeout
2000ec32 l     O .bss	00000002 tx_available
2000ec46 l     O .bss	00000001 tx_head
2000ec47 l     O .bss	00000001 tx_noautoflush
2000ec34 l     O .bss	00000002 tx_packet_size
2000a380 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
2000ec3d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 libm_a-wf_atan2.o
00000000 l    df *ABS*	00000000 libm_a-wf_sqrt.o
00000000 l    df *ABS*	00000000 libm_a-pow.o
00000000 l    df *ABS*	00000000 libm_a-sinf.o
00000000 l    df *ABS*	00000000 libm_a-cosf.o
00000000 l    df *ABS*	00000000 libm_a-math_errf.o
00000000 l    df *ABS*	00000000 libm_a-ef_sqrt.o
00000000 l    df *ABS*	00000000 libm_a-ef_atan2.o
00000000 l    df *ABS*	00000000 libm_a-sf_atan.o
00000000 l    df *ABS*	00000000 libm_a-sf_fabs.o
00000000 l    df *ABS*	00000000 libm_a-math_err.o
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-isalnum.o
00000000 l    df *ABS*	00000000 libc_a-isspace.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0001adb4 l     F .text.itcm	00000018 stdio_exit_handler
0001adcc l     F .text.itcm	00000040 cleanup_stdio
0001ae0c l     F .text.itcm	0000001c __fp_lock
0001ae28 l     F .text.itcm	0000001c __fp_unlock
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-memset.o
00000000 l    df *ABS*	00000000 libc_a-strchr.o
00000000 l    df *ABS*	00000000 libc_a-strncasecmp.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-strstr.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-getenv_r.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-strcasecmp.o
00000000 l    df *ABS*	00000000 libc_a-strcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strnlen.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00000000 l    df *ABS*	00000000 libc_a-envlock.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libm_a-pow_log_data.o
00000000 l    df *ABS*	00000000 libm_a-sincosf_data.o
00000000 l    df *ABS*	00000000 libm_a-exp_data.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 libc_a-environ.o
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
000241f8 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00024200 l     F .text.itcm	00000008 ___init_veneer
00024208 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
60001fc0 l     F .text.code	00000008 __memset_veneer
60001fc8 l     F .text.code	00000008 __sm_set_pool_veneer
60001fd0 l     F .text.code	00000008 __pwm_init_veneer
60001fd8 l     F .text.code	00000008 __main_veneer
60001fe0 l     F .text.code	00000008 __set_arm_clock_veneer
60001fe8 l     F .text.code	00000008 __delay_veneer
60001ff0 l     F .text.code	00000008 ____libc_init_array_veneer
60001ff8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
0000f5f8  w    F .text.itcm	00000004 USBHIDInput::hid_process_control(Transfer_struct const*)
000076a4 g     F .text.itcm	00000184 ULog::setLogFlagsOther(char const*)
000149d8 g     F .text.itcm	00000010 USBHost::free_string_buffer(strbuf_t*)
0001e77c g     F .text.itcm	00000028 _mprec_log10
00011c58 g     F .text.itcm	00000058 USBHub::send_poweron(unsigned long)
2000d89c g     O .bss	00000140 ad
000177f8 g     F .text.itcm	00000018 usb_serial_available
0001490c g     F .text.itcm	00000050 USBHost::init_Device_Pipe_Transfer_memory()
20007f14 g     O .data	00000014 vtable for UUSB
0001e800 g     F .text.itcm	00000062 __any_on
00011120 g     F .text.itcm	00000028 USBHIDParser::sendControlPacket(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, void*)
00024164 g     F .text.itcm	00000024 _isatty_r
20001da0 g     O .data	00000028 __mprec_tinytens
0001cadc g     F .text.itcm	000000ba strcpy
00013670 g     F .text.itcm	000001b0 JoystickController::sw_parseAckMsg(unsigned char const*)
00003834 g     F .text.itcm	00000050 UEncoder::sendData(int)
20007f50 g     O .data	00000014 vtable for UMotor
0000309c g     F .text.itcm	00000064 EEConfig::readBlock(char*, int)
00012598 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::hid_process_control(Transfer_struct const*)
0000b19c  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0000e144 g     F .text.itcm	00000024 MPU9250_asukiaaa::accelX()
0000e284 g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroZ()
600017f8 g     F .text.code	00000002 startup_default_late_hook
0001c6c4 g     F .text.itcm	0000002c _lseek_r
000179c8  w    F .text.itcm	000000d8 yield
00006b54 g     F .text.itcm	00000044 ULog::sendData(int)
2000ec28 g     O .bss	00000004 usb_timer1_callback
00006298 g     F .text.itcm	00000170 ULineSensor::sendStatusLineSensor(bool)
0000e870 g     F .text.itcm	0000001e Adafruit_GFX::fillScreen(unsigned short)
00014058 g     F .text.itcm	00000374 JoystickController::sw_process_HID_data(unsigned char const*, unsigned short)
000125c8 g     F .text.itcm	0000006c JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)
2000dc3c g     O .bss	00000004 em_rx_tx2
20007f64 g     O .data	00000014 vtable for URobot
20007f00 g     O .data	00000014 vtable for ULog
0000029c g     F .text.itcm	00000248 AS5X47::printDebugString()
60002614 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000e844 g     F .text.itcm	00000012 Adafruit_GFX::writeFastHLine(short, short, short, unsigned short)
00011db4 g     F .text.itcm	0000004a USBHub::callback(Transfer_struct const*)
2000e19c g     O .bss	00000050 irdist
60001910 g     F .text.code	00000384 configure_external_ram
20008058 g     O .data	00000014 vtable for ULedBand
00013198 g     F .text.itcm	000000b4 JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)
200095dc g     O .data	00000140 Wire1
0000168c g     F .text.itcm	00000048 UAd::sendData(int)
00002a44 g     F .text.itcm	00000044 EEConfig::EEConfig()
00018cd0 g     F .text.itcm	0000005a .hidden __floatdidf
20005ee0  w    O .data	00000010 teensy::inplace_function_detail::empty_vtable<void>
00002334 g     F .text.itcm	00000068 UCurrent::sendMotorCurrent()
0000bae4 g     F .text.itcm	00000044 USubs::tick()
2000d53c g     O .bss	00000001 __lock___atexit_recursive_mutex
000218a4 g     F .text.itcm	0000004c _wcrtomb_r
000108a4 g     F .text.itcm	00000110 USBHost::claim_drivers(Device_struct*)
0000ba98 g     F .text.itcm	0000004a USubs::decode(char const*, bool)
60001674 g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00012988 g     F .text.itcm	0000003c JoystickController::init()
0001554c g     F .text.itcm	0000001c Print::println()
0000e6d4 g     F .text.itcm	000000aa TwoWire::isr()
00008a04 g     F .text.itcm	00000048 UMotorTest::sendHelp()
00004074 g     F .text.itcm	00000020 m2EncoderA()
0001b234 g     F .text.itcm	00000020 __sseek
0001afdc g     F .text.itcm	00000040 __sinit
00024070 g     F .text.itcm	000000b0 __swbuf_r
00001d70 g     F .text.itcm	00000074 UCommand::decode(char const*)
00002554 g     F .text.itcm	0000005c UDisplay::decode(char const*)
0001c634 g     F .text.itcm	00000030 _setlocale_r
00006a68  w    F .text.itcm	0000001c ULog::~ULog()
00002508 g     F .text.itcm	00000030 UDisplay::sendHelp()
0000fd58 g     F .text.itcm	0000015c USBHost::followup_Error()
0000d368 g     F .text.itcm	00000038 UUsbHost::sendData(int)
00014aac g     F .text.itcm	000001e0 WS2812Serial::begin()
0001983c g     F .text.itcm	0000000c __malloc_unlock
0000b718 g     F .text.itcm	000000d4 UServo::setOneServo(char const*)
0000f600  w    F .text.itcm	00000002 USBDriver::control(Transfer_struct const*)
00002b80 g     F .text.itcm	00000036 EEConfig::push32(unsigned long)
20007d98 g     O .data	00000058 vtable for Adafruit_SSD1306
2000ec3c g     O .bss	00000001 USBHost::enumeration_busy
00014a7c g     F .text.itcm	00000030 USBHost::contribute_String_Buffers(strbuf_t*, unsigned long)
2000ec3a g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
000082d4 g     F .text.itcm	0000009c UMotor::motorSetPWM(int, int)
60001f5c g     F .text.code	00000054 analog_init
00004eac g     F .text.itcm	00000058 UIrDist::sendStatusDistIR()
20007f3c g     O .data	00000014 vtable for UAsEnc
0001aa90 g     F .text.itcm	0000000c _strtod_r
00008070  w    F .text.itcm	0000001c UMotor::~UMotor()
0000bf0c g     F .text.itcm	00000090 UUSB::client_send_str(char const*, int)
0000bb84 g     F .text.itcm	00000034 USubs::sendHelpLine()
0001b25c g     F .text.itcm	0000004a _vdprintf_r
20001408 g     O .data	00000870 .hidden __exp_data
00015ad0 g     F .text.itcm	00000048 eeprom_initialize
0000b198  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)
2000d524 g     O .bss	00000001 __lock___arc4random_mutex
000152a4  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)
0000dc4c g     F .text.itcm	00000046 ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)
00018928 g     F .text.itcm	00000030 .hidden __math_divzero
20009438 g     O .data	00000004 F_CPU_ACTUAL
0001ad88 g     F .text.itcm	0000000c __set_ctype
0000e224 g     F .text.itcm	00000018 MPU9250_asukiaaa::gyroUpdate()
0001b3f0 g     F .text.itcm	000000f8 memmove
00015eb8 g     F .text.itcm	00000018 eeprom_write_word
00009260 g     F .text.itcm	000004a8 UMotorTest::testModel()
000139b4 g     F .text.itcm	00000024 non-virtual thunk to JoystickController::hid_timer_event(USBDriverTimer*)
0001b144 g     F .text.itcm	00000088 snprintf
0001499c g     F .text.itcm	00000010 USBHost::allocate_Transfer()
0001ddc8 g     F .text.itcm	0000004c _Balloc
0000c76c g     F .text.itcm	000000b8 UUSB::setup()
0002421c g       .ARM.exidx	00000000 __exidx_end
000050d8 g     F .text.itcm	00000034 UIrDist::eePromSave()
0000be3c  w    F .text.itcm	00000034 UUSB::~UUSB()
2000ec39 g     O .bss	00000001 EventResponder::runningFromYield
20009970 g     O .data	00000080 isr_table_gpio2
000084d8 g     F .text.itcm	00000284 UMotor::decode(char const*)
000129c4 g     F .text.itcm	000000a4 JoystickController::transmitPS4UserFeedbackMsg()
2000843c g     O .data	000000dc pwm_pin_info
00001de4 g     F .text.itcm	00000024 UCommand::setup()
000168a8 g     F .text.itcm	00000060 tempmonGetTemp
00010728 g     F .text.itcm	00000038 USBHost::Task()
00006f2c g     F .text.itcm	00000060 ULog::writeTime(signed char*, int, char*, int)
00011a38 g     F .text.itcm	0000000c USBHIDParser::in_callback(Transfer_struct const*)
000154fc g     F .text.itcm	00000050 Print::write(unsigned char const*, unsigned int)
2000942c g     O .data	00000004 __atexit_recursive_mutex
0001c76c g     F .text.itcm	0000000c __errno
0001c7c8 g     F .text.itcm	00000002 __retarget_lock_close
00011148 g     F .text.itcm	00000020 USBHIDParser::driver_ready_for_hid_collection(USBHIDInput*)
20007f78 g     O .data	0000001c vtable for USBHub
00018564 g     F .text.itcm	0000000c .hidden __math_may_uflowf
60001000 g     O .text.headers	00000020 ImageVectorTable
2000d870 g     O .bss	00000004 EventResponder::firstInterrupt
000001f4 g     F .text.itcm	0000000c AS5X47::AS5X47(unsigned char)
000171f8 g     F .text.itcm	00000004 usb_transfer_status
2000e658 g     O .bss	00000004 p12b
00020998 g     F .text.itcm	00000004 __localeconv_l
00017b10 g     F .text.itcm	00000084 sm_set_pool
00010824 g     F .text.itcm	0000007e USBHost::convertStringDescriptorToASCIIString(unsigned char, Device_struct*, Transfer_struct const*)
2000d87c g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00011a44 g     F .text.itcm	00000068 USBHub::disconnect()
00012158 g     F .text.itcm	00000234 USBHub::control(Transfer_struct const*)
00011f08 g     F .text.itcm	00000058 USBHub::send_clearstatus_overcurrent(unsigned long)
00001c34 g     F .text.itcm	00000024 UAsEnc::eePromLoad()
2000d270 g     O .bss	00000004 __stdio_exit_handler
0000eb74 g     F .text.itcm	00000118 Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
00015bac g     F .text.itcm	0000002e eeprom_read_dword
00004f4c g     F .text.itcm	00000010 UIrDist::sendData(int)
000018f8  w    F .text.itcm	0000001c UAsEnc::~UAsEnc()
20009b66 g     O .data	00000001 analog_write_res
00024188 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0001e934 g     F .text.itcm	00000056 __sjis_wctomb
0000a608 g     F .text.itcm	00000118 URobot::powerOff(float)
00013820 g     F .text.itcm	00000170 JoystickController::sw_handle_usb_init_of_joystick(unsigned char*, unsigned short, bool)
00002928 g     F .text.itcm	00000034 UDisplay::eePromLoad()
0001726c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00005b00 g     F .text.itcm	000002d4 ULineSensor::decode(char const*)
00024138 g     F .text.itcm	0000002c _fstat_r
200080cc g     O .data	00000370 digital_pin_to_info_PGM
0000b67c g     F .text.itcm	0000009c UServo::setServoConfig(char const*)
2000d520 g     O .bss	00000004 errno
0000e18c g     F .text.itcm	00000024 MPU9250_asukiaaa::accelZ()
6000255c  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
0001b1f0 g     F .text.itcm	00000004 __seofread
00024218 g       .text.itcm	00000000 _etext
00011d10 g     F .text.itcm	000000a4 USBHub::timer_event(USBDriverTimer*)
0000f2e0 g     F .text.itcm	000000dc _spi_dma_rxISR0()
0000dfa0 g     F .text.itcm	00000004 MPU9250_asukiaaa::setWire(TwoWire*)
20009ec0 g       .bss	00000000 _sbss
0000feb4 g     F .text.itcm	00000250 USBHost::isr()
00001a04 g     F .text.itcm	00000104 UAsEnc::sendData(int)
00000cb8 g     F .text.itcm	000000f6 Adafruit_SSD1306::ssd1306_commandList(unsigned char const*, unsigned char)
0000e968 g     F .text.itcm	000000a4 Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
000075bc g     F .text.itcm	00000070 ULog::writeBufferMsg()
00018d38 g     F .text.itcm	00000160 .hidden __aeabi_fadd
00010780 g     F .text.itcm	000000a4 USBHost::new_Device(unsigned long, unsigned long, unsigned long)
00018d34 g     F .text.itcm	00000164 .hidden __subsf3
000159e0 g     F .text.itcm	00000024 digitalRead
000005f4 g     F .text.itcm	00000028 AS5X47Spi::AS5X47Spi(unsigned char)
60002704 g       *ABS*	00000000 _stextload
00006074 g     F .text.itcm	000000d0 ULineSensor::calibrateWhiteNow()
0000019c g     F .text.itcm	00000038 loop
0001652c g     F .text.itcm	0000007a flexpwm_init
00015be0 g     F .text.itcm	000000ec eepromemu_flash_write
2000d878 g     O .bss	00000004 BluetoothController::available_bthid_drivers_list
000161d4 g     F .text.itcm	000000b4 flexpwmWrite
2000eac4 g     O .bss	00000004 tried
0000201c  w    F .text.itcm	0000001c UCurrent::~UCurrent()
00001bc0 g     F .text.itcm	0000004c UAsEnc::tick()
600017fc g     F .text.code	00000004 startup_debug_reset
000170bc g     F .text.itcm	00000064 usb_config_rx
00003884 g     F .text.itcm	00000040 UEncoder::eePromSave()
00017b98 g     F .text.itcm	00000044 sqrtf
00007828 g     F .text.itcm	0000016c ULog::decode(char const*)
0000f5fc  w    F .text.itcm	00000002 USBDriver::Task()
20007f94 g     O .data	00000014 vtable for UServo
20007d10 g     O .data	00000014 vtable for ULineSensor
00004664 g     F .text.itcm	000000c0 UImu2::sendRawGyro()
00003124 g     F .text.itcm	00000080 UEncoder::sendHelp()
000025b0 g     F .text.itcm	00000038 UDisplay::sendData(int)
000109b4 g     F .text.itcm	000002a0 USBHost::enumeration(Transfer_struct const*)
00013b10 g     F .text.itcm	00000022 JoystickController::bt_hid_timer_event(USBDriverTimer*)
000132b8 g     F .text.itcm	000000d8 JoystickController::sw_sendCmd(unsigned char, unsigned char*, unsigned short, unsigned long)
0000ec8c g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
0001e98c g     F .text.itcm	0000007c __eucjp_wctomb
0000e474 g     F .text.itcm	00000100 TwoWire::endTransmission(unsigned char)
0000c628 g     F .text.itcm	0000006e UUSB::decodeAll(char const*)
00013430 g     F .text.itcm	00000054 JoystickController::sw_sendCmdUSB(unsigned char, unsigned long)
0000dfa4 g     F .text.itcm	0000002c MPU9250_asukiaaa::readId(unsigned char*)
2000d86c g     O .bss	00000004 EventResponder::lastInterrupt
000125a0 g     F .text.itcm	00000028 JoystickController::disconnect_collection(Device_struct*)
00016034 g     F .text.itcm	00000134 memcpy
0001265c g     F .text.itcm	00000004 non-virtual thunk to JoystickController::hid_process_out_data(Transfer_struct const*)
0001d6e0 g     F .text.itcm	000001b0 __hexnan
000119ac g     F .text.itcm	0000008c USBHIDParser::in_data(Transfer_struct const*)
0000c5c0 g     F .text.itcm	00000068 UUSB::sendAllHelp()
0000ab38 g     F .text.itcm	0000038c URobot::decode(char const*)
20009ec0 g     O .data	00000000 .hidden __TMC_END__
00018958 g     F .text.itcm	0000001c .hidden __math_invalid
00008bc8 g     F .text.itcm	000000a0 UMotorTest::sendMotorParameters()
00008370 g     F .text.itcm	00000164 UMotor::motorSetAnchorVoltage()
00012690 g     F .text.itcm	0000000e non-virtual thunk to JoystickController::hid_input_end()
000014f0 g     F .text.itcm	000000b8 UAd::tick()
0001ea88 g     F .text.itcm	00001b44 _svfprintf_r
00018c58 g     F .text.itcm	00000022 .hidden __floatsidf
0000bc90 g     F .text.itcm	0000004c USubss::serviceStatus(int)
0000c598 g     F .text.itcm	00000028 UUSB::stopAllSubscriptions()
2000eabc g     O .bss	00000004 systick_millis_count
000073fc g     F .text.itcm	000000c4 ULog::writeLineSensor(signed char*, int, char*, int)
20008008 g     O .data	00000014 vtable for UCommand
0000e434 g     F .text.itcm	00000040 TwoWire::wait_idle()
0001272c g     F .text.itcm	0000000a non-virtual thunk to JoystickController::bt_hid_input_data(unsigned long, long)
00018f48 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
00000db0 g     F .text.itcm	0000039c Adafruit_SSD1306::begin(unsigned char, unsigned char, bool, bool)
2000ec49 g     O .bss	00000001 usb_configuration
00012634 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::bt_claim_collection(BluetoothConnection*, unsigned long, unsigned long)
00017ac4 g     F .text.itcm	0000004c sm_align_pool
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bf9c g     F .text.itcm	00000074 UUSB::send(char const*)
0000d1cc g     F .text.itcm	0000008c UUsbHost::sendAxis()
0000d73c g     F .text.itcm	00000056 ADC_Module::setReference(ADC_settings::ADC_REFERENCE)
00005f10 g     F .text.itcm	00000164 ULineSensor::lineDetect()
0001e718 g     F .text.itcm	00000062 __ratio
0000d3a0 g     F .text.itcm	00000110 UUsbHost::PrintDeviceListChanges()
000163f0 g     F .text.itcm	000000cc analogWrite
00008920 g     F .text.itcm	00000044 UMotor::eePromLoad()
0000d6f8 g     F .text.itcm	00000010 ADC::readSingle(signed char)
00010fb0 g     F .text.itcm	0000004c USBHIDParser::out_data(Transfer_struct const*)
60002614  w    O .text.progmem	00000018 usb_string_manufacturer_name
00004d3c  w    F .text.itcm	0000001c UIrDist::~UIrDist()
000192bc g     F .text.itcm	00000010 malloc
00011aac g     F .text.itcm	00000178 USBHub::claim(Device_struct*, int, unsigned char const*, unsigned long)
00000b80 g     F .text.itcm	00000092 Adafruit_SSD1306::ssd1306_command1(unsigned char)
600025ac  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000daf0 g     O .bss	00000028 dbehave
00016884  w    F .text.itcm	0000000a _fstat
0000de78  w    F .text.itcm	0000001e TwoWire::read()
00020a28 g     F .text.itcm	00000040 __assert_func
00018ea0 g     F .text.itcm	0000001c .hidden __aeabi_i2f
0000f2c8  w    F .text.itcm	00000016 EventResponder::triggerEvent(int, void*)
20001cd8 g     O .data	000000c8 __mprec_tens
60001e20 g     F .text.code	000000e8 usb_init
0000e260 g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroY()
2000ec3b g     O .bss	00000001 USBHub::reset_busy
0000e890 g     F .text.itcm	00000002 Adafruit_GFX::invertDisplay(bool)
00002a88 g     F .text.itcm	000000f8 EEConfig::stringConfigToUSB(unsigned char const*, int)
2000d104 g     O .bss	00000004 __malloc_top_pad
00002c78 g     F .text.itcm	00000026 EEConfig::readWord()
0000e03c g     F .text.itcm	0000004a MPU9250_asukiaaa::magReadAdjustValues()
2000eac0 g     O .bss	00000004 systick_safe_read
00002008 g     F .text.itcm	00000004 UCurrent::decode(char const*)
0000e32c g     F .text.itcm	00000108 TwoWire::force_clock()
20008030 g     O .data	00000014 vtable for UDisplay
200080ac  w    O .data	00000010 teensy::inplace_function<void (), 16u, 8u>::inplace_function<void (&)(), void (*)(), void>(void (&)())::vt
aaaaabff g       *ABS*	00000000 _flexram_bank_config
0000db1c g     F .text.itcm	00000078 ADC_Module::setResolution(unsigned char)
20008e80 g     O .data	00000000 .hidden __dso_handle
00015ccc g     F .text.itcm	000000b8 eepromemu_flash_erase_sector
00018c38 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00005e44 g     F .text.itcm	000000cc ULineSensor::setup()
0002099c g     F .text.itcm	00000008 _localeconv_r
0000b37c g     F .text.itcm	00000078 UService::updateSensors()
00003e84 g     F .text.itcm	000001d0 UEncoder::encoderInterrupt(int, bool)
00023898 g     F .text.itcm	000002f4 __sfvwrite_r
0001e01c g     F .text.itcm	0000005c __i2b
0000e23c g     F .text.itcm	00000024 MPU9250_asukiaaa::gyroX()
20000000 g       .data	00000000 _sdata
00011fb8 g     F .text.itcm	00000058 USBHub::send_setreset(unsigned long)
60002694 g     O .text.progmem	00000062 usb_config_descriptor_480
00018f78 g     F .text.itcm	000002c8 .hidden __udivmoddi4
000189b4 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000c1d8 g     F .text.itcm	00000208 UUSB::receivedCharFromUSB(unsigned char)
00001d54  w    F .text.itcm	0000001c UCommand::~UCommand()
2000dc40 g     O .bss	0000053c encoder
000124f8 g     F .text.itcm	00000002 JoystickController::tx_data(Transfer_struct const*)
00009844 g     F .text.itcm	00000238 UMotorTest::getMotorTestLog()
0001c71c g     F .text.itcm	00000024 _sbrk_r
00006ba0 g     F .text.itcm	0000038c ULog::stateToLog()
2000dbf4 g     O .bss	00000044 eeConfig
600017f0 g     F .text.code	00000002 startup_default_early_hook
00000760 g     F .text.itcm	000000f2 Adafruit_SSD1306::drawPixel(short, short, unsigned short)
6000164c g     F .text.code	00000028 ResetHandler
0001859c g     F .text.itcm	0000001c .hidden __math_invalidf
00017880 g     F .text.itcm	00000020 usb_serial_getchar
00002c28 g     F .text.itcm	00000026 EEConfig::read32()
2000ec18 g     O .bss	00000008 usb_cdc_line_coding
00014a18 g     F .text.itcm	00000030 USBHost::contribute_Pipes(Pipe_struct*, unsigned long)
0001598c g     F .text.itcm	00000054 digitalWrite
000188ac g     F .text.itcm	0000000e fabsf
2000d874 g     O .bss	00000004 EventResponder::lastYield
20003bd4 g     O .data	0000002a ADC::channel2sc1aADC0
0000d258 g     F .text.itcm	00000034 UUsbHost::sendButtons()
0001c6f0 g     F .text.itcm	0000002c _read_r
2000da18 g     O .bss	00000078 command
00013254 g     F .text.itcm	00000032 JoystickController::remoteNameComplete(unsigned char const*)
0001ada4 g     F .text.itcm	00000010 isspace
00008070  w    F .text.itcm	0000001c UMotor::~UMotor()
00002400 g     F .text.itcm	00000064 UCurrent::sendData(int)
000205cc g     F .text.itcm	000000c6 _fclose_r
0000b488  w    F .text.itcm	0000001c UServo::~UServo()
00005dd4 g     F .text.itcm	00000054 ULineSensor::sendHelp()
2000e18c g     O .bss	00000010 extmem_smalloc_pool
00020828 g     F .text.itcm	00000074 fflush
0000821c g     F .text.itcm	000000b8 UMotor::motorSetEnable(bool, bool)
2000d130 g     O .bss	00000004 __malloc_max_sbrked_mem
0001238c g     F .text.itcm	00000002 JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)
00015a04 g     F .text.itcm	00000070 pinMode
2000d6f4 g     O .bss	0000001c SWStickCal
00014888 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)
00018c7c g     F .text.itcm	00000042 .hidden __extendsfdf2
00004474 g     F .text.itcm	00000034 UImu2::eePromLoad()
00014c8c g     F .text.itcm	00000474 WS2812Serial::show()
000189c0 g     F .text.itcm	00000276 .hidden __adddf3
600016a8 g     F .text.code	00000054 TwoWire::setSDA(unsigned char)
00001b3c g     F .text.itcm	00000084 UAsEnc::setup()
2000971c g     O .data	00000140 Wire2
60030800 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
00010f84 g     F .text.itcm	0000002a USBHIDParser::init()
00004254  w    F .text.itcm	0000001c UImu2::~UImu2()
0001e580 g     F .text.itcm	000000c2 __b2d
00024214 g       .ARM.exidx	00000000 __exidx_start
0000c094 g     F .text.itcm	00000084 UUSB::sendHelp()
70000000 g       .bss.extram	00000000 _extram_end
2000d530 g     O .bss	00000001 __lock___env_recursive_mutex
00016890  w    F .text.itcm	00000004 _isatty
2000d868 g     O .bss	00000004 EventResponder::firstYield
0000db94 g     F .text.itcm	000000b8 ADC_Module::analog_init()
20007cfc g     O .data	00000014 vtable for UMotorTest
00011c24 g     F .text.itcm	00000034 USBHub::init()
20009b48 g     O .data	00000008 sampleTimer
00005230 g     F .text.itcm	0000017c ULedBand::decode(char const*)
0000e858 g     F .text.itcm	00000018 Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
00019848 g     F .text.itcm	000003d8 _realloc_r
0001b658 g     F .text.itcm	0000005c strncasecmp
0001c778 g     F .text.itcm	00000048 __libc_init_array
0000de6c  w    F .text.itcm	0000000c TwoWire::available()
0000ba78 g     F .text.itcm	00000020 USubs::USubs(char const*, char const*)
2000db18 g     O .bss	000000a4 display
0001ad4c g     F .text.itcm	00000018 strtol_l
00023f0c g     F .text.itcm	0000002c wcsnrtombs
0000c1c8 g     F .text.itcm	00000010 UUSB::sendData(int)
00004f5c g     F .text.itcm	0000007c UIrDist::calibrateIr()
2000245c g     O .data	00000100 __hexdig
200098f0 g     O .data	00000080 isr_table_gpio1
00008818 g     F .text.itcm	000000d8 UMotor::tick()
0000061c g     F .text.itcm	0000013c AS5X47Spi::readData(unsigned short, unsigned short)
00023d04 g     F .text.itcm	00000066 _fputwc_r
0000ba78 g     F .text.itcm	00000000 std::__throw_length_error(char const*)
20001dc8 g     O .data	00000028 __mprec_bigtens
0001decc g     F .text.itcm	000000b0 __s2b
000168a0  w    F .text.itcm	00000004 abort
0000e574 g     F .text.itcm	00000160 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000fa00 g     F .text.itcm	000000e8 USBHost::queue_Transfer(Pipe_struct*, Transfer_struct*)
00017254  w    F .text.itcm	00000004 usb_serial_class::clear()
00018c38 g     F .text.itcm	0000001e .hidden __floatunsidf
00016844  w    F .text.itcm	00000034 _sbrk
60026920 g       *ABS*	00000000 _sdataload
0001e384 g     F .text.itcm	00000042 __mcmp
00002918 g     F .text.itcm	00000010 UDisplay::eePromSave()
2000dbbc g     O .bss	00000036 drawingMemory
20007fa8  w    O .data	00000014 vtable for USubss
0000808c g     F .text.itcm	00000190 UMotor::setup()
00010cd4 g     F .text.itcm	00000026 USBHIDParser::disconnect()
00015f20 g     F .text.itcm	00000104 attachInterrupt
200098d8 g     O .data	00000004 __brkval
2000ec48 g     O .bss	00000001 usb_cdc_line_rtsdtr
0001b034 g     F .text.itcm	00000024 __fp_lock_all
0000bd2c  w    F .text.itcm	000000d4 void std::vector<USubs*, std::allocator<USubs*> >::_M_realloc_insert<USubs*>(__gnu_cxx::__normal_iterator<USubs**, std::vector<USubs*, std::allocator<USubs*> > >, USubs*&&)
0000d5c8 g     F .text.itcm	0000009c ADC::analogRead(unsigned char, signed char)
60001fb0 g     F .text.code	00000000 _init
000124f4 g     F .text.itcm	00000004 JoystickController::hid_process_out_data(Transfer_struct const*)
000175d0 g     F .text.itcm	00000002 usb_serial_reset
00004724 g     F .text.itcm	00000068 UImu2::sendData(int)
00004f04 g     F .text.itcm	00000048 UIrDist::sendStatusDistIR2()
0000f628 g     F .text.itcm	00000054 BluetoothController::queue_Data_Transfer_Debug(Pipe_struct*, void*, unsigned long, USBDriver*, unsigned long)
000124dc g     F .text.itcm	00000008 non-virtual thunk to JoystickController::hid_input_data(unsigned long, long)
0001ad64 g     F .text.itcm	00000018 strtol
00002100 g     F .text.itcm	00000234 UCurrent::tick()
00015d84 g     F .text.itcm	00000134 eeprom_write_byte
20001328 g     O .data	000000e0 .hidden __sincosf_table
00018368 g     F .text.itcm	000001bc cosf
00020974 g     F .text.itcm	00000024 strnlen
00010760 g     F .text.itcm	00000020 USBHost::driver_ready_for_device(USBDriver*)
00013288 g     F .text.itcm	0000002e non-virtual thunk to JoystickController::remoteNameComplete(unsigned char const*)
000111a4 g     F .text.itcm	000000fc USBHIDParser::parse()
00012704 g     F .text.itcm	00000028 non-virtual thunk to JoystickController::bt_hid_input_end()
000241b8 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
0000bcdc g     F .text.itcm	00000028 USubss::stopSubscriptions()
0000f750  w    F .text.itcm	00000004 USBHIDInput::hid_process_in_data(Transfer_struct const*)
00018d34 g     F .text.itcm	00000164 .hidden __aeabi_fsub
60002630 g     O .text.progmem	00000062 usb_config_descriptor_12
00000020 g     F .text.itcm	000000c0 irq_gpio6789
20007fbc g     O .data	00000024 vtable for TwoWire
00019c20 g     F .text.itcm	00000e70 _strtod_l
0001d6a8 g     F .text.itcm	00000036 __match
000164bc g     F .text.itcm	00000070 analogWriteFrequency
000051e4 g     F .text.itcm	00000030 ULedBand::sendHelp()
0000e1b0 g     F .text.itcm	00000074 MPU9250_asukiaaa::beginGyro(unsigned char)
000040b4 g     F .text.itcm	00000020 m2EncoderB()
0001ea08 g     F .text.itcm	0000007a __jis_wctomb
00000248 g     F .text.itcm	00000040 AS5X47::readVel()
2000ec80 g       .bss	00000000 _ebss
0000e820 g     F .text.itcm	0000000e Adafruit_GFX::writePixel(short, short, unsigned short)
0000f184 g     F .text.itcm	00000136 Adafruit_GFX::write(unsigned char)
00013484 g     F .text.itcm	0000011c JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)
0000b4e8 g     F .text.itcm	000000b4 UServo::setup()
0000d708 g     F .text.itcm	00000034 ADC_Module::calibrate()
600016fc g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0001df7c g     F .text.itcm	00000040 __hi0bits
0000d588 g     F .text.itcm	00000040 ADC::ADC()
0000e78c g     F .text.itcm	0000000c lpi2c3_isr()
0000dfd0 g     F .text.itcm	0000006c MPU9250_asukiaaa::beginAccel(unsigned char)
000130c8 g     F .text.itcm	00000018 JoystickController::joystickDataClear()
00000a3c g     F .text.itcm	00000076 Adafruit_SSD1306::drawFastHLine(short, short, short, unsigned short)
20203160 g       .bss.dma	00000000 _heap_start
000110d4 g     F .text.itcm	0000004c USBHIDParser::setTXBuffers(unsigned char*, unsigned char*, unsigned char, unsigned char*, unsigned char*)
00011168 g     F .text.itcm	0000003c USBHIDParser::find_driver(unsigned long)
2000d534 g     O .bss	00000001 __lock___malloc_recursive_mutex
00002464 g     F .text.itcm	00000020 UCurrent::getSupplyCurrent()
00018ecc g     F .text.itcm	0000007c .hidden __floatdisf
0001aab8 g     F .text.itcm	00000020 strtod
0001263c g     F .text.itcm	0000001c JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)
000149e8 g     F .text.itcm	00000030 USBHost::contribute_Devices(Device_struct*, unsigned long)
0000bbb8 g     F .text.itcm	00000014 USubss::USubss()
00016364 g     F .text.itcm	0000008c quadtimerFrequency
6000250c  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
0000299c g     F .text.itcm	0000008c EEConfig::sendHelp()
2000d138 g     O .bss	00000138 __sf
000001f4 g     F .text.itcm	0000000c AS5X47::AS5X47(unsigned char)
0000df50 g     F .text.itcm	00000038 MPU9250_asukiaaa::i2cWriteByte(unsigned char, unsigned char, unsigned char)
000126a0 g     F .text.itcm	00000028 non-virtual thunk to JoystickController::disconnect_collection(Device_struct*)
0000a050 g     F .text.itcm	00000114 URobot::setup()
00004e48 g     F .text.itcm	00000050 UIrDist::setup()
00015bdc g     F .text.itcm	00000004 eeprom_is_ready
00000005 g       *ABS*	00000000 _itcm_block_count
2000a260 g     O .bss	00000020 endpoint0_transfer_data
20009430 g     O .data	00000004 environ
00001380 g     F .text.itcm	00000004 UAd::decode(char const*)
000031a8 g     F .text.itcm	0000022c UEncoder::decode(char const*)
00000200 g     F .text.itcm	00000012 AS5X47::readRegister(unsigned short)
0001616c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
000045a4 g     F .text.itcm	000000c0 UImu2::sendRawAcc()
000165a8 g     F .text.itcm	000000f4 pwm_init
00000288 g     F .text.itcm	00000014 AS5X47::readErr()
000189c0 g     F .text.itcm	00000276 .hidden __aeabi_dadd
00003580 g     F .text.itcm	00000090 UEncoder::sendRobotConfig()
0000dd08 g     F .text.itcm	000000e8 ADC_Module::analogRead(unsigned char)
000044a8 g     F .text.itcm	0000007c UImu2::sendStatusGyro()
00006834 g     F .text.itcm	00000100 ULineSensor::eePromLoadLinesensor()
00004e98 g     F .text.itcm	00000014 UIrDist::tick()
000208f0 g     F .text.itcm	0000003e strcat
60031400 g       .text.csf	00000000 __text_csf_end
00018918 g     F .text.itcm	00000010 .hidden __math_oflow
0000e830 g     F .text.itcm	00000012 Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
00002904 g     F .text.itcm	00000014 UDisplay::setLine(char const*)
60001c94 g     F .text.code	0000005c usb_pll_start
0001aad8 g     F .text.itcm	00000084 strtof_l
00009f10 g     F .text.itcm	00000120 URobot::sendHelp()
00007170 g     F .text.itcm	00000054 ULog::writeEnc(signed char*, int, char*, int)
0001e1d4 g     F .text.itcm	000000c0 __pow5mult
00018cc0 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
0000e798 g     F .text.itcm	0000000c lpi2c4_isr()
00002e20 g     F .text.itcm	000001e0 EEConfig::eePromLoadStatus(bool)
00012a68 g     F .text.itcm	0000012c JoystickController::transmitPS3UserFeedbackMsg()
0000a030  w    F .text.itcm	0000001c URobot::~URobot()
00003bd0 g     F .text.itcm	000001a4 UEncoder::updateVelocityEstimate()
0000510c g     F .text.itcm	00000080 UIrDist::eePromLoad()
0000708c g     F .text.itcm	0000007c ULog::writeCurrent(signed char*, int, char*, int)
2000a240 g     O .bss	00000020 endpoint0_transfer_ack
2000ec20 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00008964 g     F .text.itcm	00000048 UMotor::stopAllMotors()
000171b4 g     F .text.itcm	00000028 usb_transmit
00007108 g     F .text.itcm	00000068 ULog::writeVel(signed char*, int, char*, int)
20009af0 g     O .data	0000001c leds
00015280 g     F .text.itcm	00000020 systick_isr
00014420 g     F .text.itcm	00000468 JoystickController::process_bluetooth_HID_data(unsigned char const*, unsigned short)
00011f60 g     F .text.itcm	00000058 USBHub::send_clearstatus_reset(unsigned long)
0001c7e4 g     F .text.itcm	00000002 __retarget_lock_release_recursive
20007d7c g     O .data	0000001c vtable for USBHIDParser
00006a14 g     F .text.itcm	00000054 ULog::sendHelp()
0000fc1c g     F .text.itcm	0000013c USBHost::queue_Data_Transfer(Pipe_struct*, void*, unsigned long, USBDriver*)
200022f0 g     O .data	0000016c __C_locale
2000948c g     O .data	00000010 Serial
0000df88 g     F .text.itcm	00000018 MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)
0000c928  w    F .text.itcm	00000460 UUsbHost::UUsbHost()
00013390 g     F .text.itcm	00000098 JoystickController::connectionComplete()
0001c7dc g     F .text.itcm	00000004 __retarget_lock_try_acquire_recursive
00018558 g     F .text.itcm	0000000c .hidden __math_uflowf
20000280 g     O .data	00001048 .hidden __pow_log_data
0000d28c g     F .text.itcm	000000dc UUsbHost::sendJoy()
000154f4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
600017f0  w    F .text.code	00000002 startup_early_hook
00018984 g     F .text.itcm	00000024 .hidden __math_check_oflow
2000e1ec g     O .bss	00000060 ledband
000130e0 g     F .text.itcm	000000b8 JoystickController::mapNameToJoystickType(unsigned char const*)
000177b4 g     F .text.itcm	00000044 usb_serial_peekchar
00018908 g     F .text.itcm	00000010 .hidden __math_may_uflow
0001b0c4 g     F .text.itcm	0000007e _snprintf_r
0000c824 g     F .text.itcm	0000002e UUSB::addSubscriptionService(USubss*)
0001c3cc g     F .text.itcm	00000050 __get_locale_env
00014890 g     F .text.itcm	00000054 non-virtual thunk to JoystickController::hid_process_in_data(Transfer_struct const*)
0001b01c g     F .text.itcm	0000000c __sfp_lock_acquire
0001cba0 g     F .text.itcm	00000000 memchr
000155a0 g     F .text.itcm	000002f0 set_arm_clock
2000eab8 g     O .bss	00000004 systick_cycle_count
00012500 g     F .text.itcm	0000000e JoystickController::disconnect()
20009b50 g     O .data	00000016 usb_string_serial_number_default
00015ed0 g     F .text.itcm	0000002c eeprom_write_dword
0001ce64 g     F .text.itcm	0000020c _free_r
000139d8 g     F .text.itcm	00000138 JoystickController::sw_handle_bt_init_of_joystick(unsigned char const*, unsigned short, bool)
0001c664 g     F .text.itcm	0000000c __locale_mb_cur_max
00021948 g     F .text.itcm	00000016 _wcsrtombs_r
000033d4  w    F .text.itcm	0000001c UEncoder::~UEncoder()
00008760 g     F .text.itcm	00000058 UMotor::sendMotorValues()
2000d544 g     O .bss	00000190 __atexit0
00017264  w    F .text.itcm	00000004 usb_serial_class::flush()
00002538  w    F .text.itcm	0000001c UDisplay::~UDisplay()
000087b8 g     F .text.itcm	0000004c UMotor::sendMotorPWM()
000143cc g     F .text.itcm	00000052 JoystickController::hid_process_in_data(Transfer_struct const*)
000189bc g     F .text.itcm	0000027a .hidden __aeabi_dsub
00012670 g     F .text.itcm	00000020 JoystickController::bt_hid_input_end()
2000940c g     O .data	00000020 __default_locale
2000928c g     O .data	00000004 __malloc_sbrk_base
0001725c  w    F .text.itcm	00000004 usb_serial_class::read()
0001279c g     F .text.itcm	000001ec JoystickController::claim(Device_struct*, int, unsigned char const*, unsigned long)
0001bbe4 g     F .text.itcm	00000166 strstr
00012510 g     F .text.itcm	00000006 JoystickController::bt_hid_input_data(unsigned long, long)
0001c7d8 g     F .text.itcm	00000004 __retarget_lock_try_acquire
00002538  w    F .text.itcm	0000001c UDisplay::~UDisplay()
00018cc0 g     F .text.itcm	0000006a .hidden __floatundidf
0000ea0c g     F .text.itcm	00000094 Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
00016894  w    F .text.itcm	00000006 _lseek
0001689c  w    F .text.itcm	00000004 __cxa_pure_virtual
0000c3e0 g     F .text.itcm	00000042 UUSB::handleIncoming()
0000c928  w    F .text.itcm	00000460 UUsbHost::UUsbHost()
00007a54 g     F .text.itcm	000002cc ULog::logWriteBufferTo(int)
0001e294 g     F .text.itcm	000000f0 __lshift
00006ad0 g     F .text.itcm	00000084 ULog::sendLogFlagsOther()
00017184 g     F .text.itcm	00000030 usb_prepare_transfer
0000d4b0 g     F .text.itcm	000000b4 UUsbHost::decode(char const*)
0000e088 g     F .text.itcm	000000a4 MPU9250_asukiaaa::beginMag(unsigned char)
000166b8 g     F .text.itcm	0000018c unused_interrupt_vector
00001804 g     F .text.itcm	0000000c adc1_isr()
00002038 g     F .text.itcm	000000c8 UCurrent::setup()
00018ea0 g     F .text.itcm	0000001c .hidden __floatsisf
000219c8 g     F .text.itcm	00000100 __ssprint_r
2000ec24 g     O .bss	00000004 usb_timer0_callback
60001cf0 g     F .text.code	00000130 tempmon_init
0001b2c4 g     F .text.itcm	00000062 _vasnprintf_r
000053ac g     F .text.itcm	000000a8 ULedBand::setup()
00014a48 g     F .text.itcm	00000034 USBHost::contribute_Transfers(Transfer_struct*, unsigned long)
0000301c g     F .text.itcm	0000002c EEConfig::decode(char const*)
0001cd3c g     F .text.itcm	00000088 __register_exitproc
0000dcf0 g     F .text.itcm	00000018 ADC_Module::checkPin(unsigned char)
00002bf0 g     F .text.itcm	00000036 EEConfig::pushWord(unsigned short)
000152ac  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)
00015b18 g     F .text.itcm	0000007c eeprom_read_byte
0001db30 g     F .text.itcm	0000008e __sjis_mbtowc
00020930 g     F .text.itcm	00000044 strlcpy
00005458 g     F .text.itcm	00000550 ULedBand::tick()
0001b6b4 g     F .text.itcm	0000008a strncmp
0001b328 g     F .text.itcm	00000068 vasnprintf
00017810 g     F .text.itcm	00000070 usb_serial_flush_input
00004374 g     F .text.itcm	000000d0 UImu2::decode(char const*)
00021960 g     F .text.itcm	00000024 wcsrtombs
0000bbb8 g     F .text.itcm	00000014 USubss::USubss()
2000e24c g     O .bss	00000144 logger
0001e078 g     F .text.itcm	0000015c __multiply
2000da90 g     O .bss	00000060 current
0000a2e4 g     F .text.itcm	0000007c URobot::sendData(int)
2000ea68 g     O .bss	00000050 servo
00001394  w    F .text.itcm	0000001c UAd::~UAd()
00017be0 g     F .text.itcm	0000057c pow
000178a0 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
00012660 g     F .text.itcm	0000000e non-virtual thunk to JoystickController::release_bluetooth()
00003048 g     F .text.itcm	00000052 EEConfig::pushBlock(char const*, int)
0001b740 g     F .text.itcm	00000064 strncpy
00001f18 g     F .text.itcm	00000008 UCommand::sendData(int)
2000d108 g     O .bss	00000028 __malloc_current_mallinfo
200070a0 g     O .data	00000070 SPIClass::spiclass_lpspi4_hardware
0001e644 g     F .text.itcm	000000d4 __d2b
0002089c g     F .text.itcm	00000054 strcasecmp
0000e81c g     F .text.itcm	00000002 Adafruit_GFX::endWrite()
0000b9ec g     F .text.itcm	0000002c UServo::eePromSave()
0000619c g     F .text.itcm	00000054 ULineSensor::sendLineSensorPosition()
00001c0c g     F .text.itcm	00000028 UAsEnc::eePromSave()
60001f08 g     F .text.code	00000054 _reboot_Teensyduino_
00005e28  w    F .text.itcm	0000001c ULineSensor::~ULineSensor()
00013b34 g     F .text.itcm	00000024 non-virtual thunk to JoystickController::bt_hid_timer_event(USBDriverTimer*)
000135a8 g     F .text.itcm	000000c8 JoystickController::sw_sendSubCmdUSB(unsigned char, unsigned char*, unsigned char, unsigned long)
00008cc0 g     F .text.itcm	00000080 UMotorTest::eePromSave()
600017f4 g     F .text.code	00000002 startup_default_middle_hook
20007eec g     O .data	00000014 vtable for UAd
00001e08 g     F .text.itcm	00000030 UCommand::getRevisionNumber()
000033d4  w    F .text.itcm	0000001c UEncoder::~UEncoder()
0000b120 g     F .text.itcm	00000064 UService::sampleTimeInterrupt()
00010104 g     F .text.itcm	00000240 USBHost::allocate_interrupt_pipe_bandwidth(Pipe_struct*, unsigned long, unsigned long)
00016a8c g     F .text.itcm	00000630 usb_isr
0001ad7c g     F .text.itcm	0000000c __cxa_atexit
0000fae8 g     F .text.itcm	00000134 USBHost::queue_Control_Transfer(Device_struct*, setup_t*, void*, USBDriver*)
00003518 g     F .text.itcm	00000064 UEncoder::sendEncoderErrors()
0001c6a0 g     F .text.itcm	00000024 _close_r
0000b59c g     F .text.itcm	00000034 UServo::setServo(signed char, short, bool, signed char)
00018c58 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00015354 g     F .text.itcm	00000104 IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)
0000afec g     F .text.itcm	00000040 URobot::eePromSave()
000059a8 g     F .text.itcm	00000078 ULedBand::setPixel(int, int, int, int)
000149bc g     F .text.itcm	0000001c USBHost::allocate_string_buffer()
0000c178 g     F .text.itcm	00000050 UUSB::sendSubscriptionStatus()
0000ecbc g     F .text.itcm	000000f4 Adafruit_GFX::drawBitmap(short, short, unsigned char const*, short, short, unsigned short)
00000c14 g     F .text.itcm	000000a2 Adafruit_SSD1306::invertDisplay(bool)
00001384 g     F .text.itcm	00000010 UAd::sendHelp()
2000943c g     O .data	00000050 SPI
200099f0 g     O .data	00000080 isr_table_gpio3
0001b390 g     F .text.itcm	00000060 memcmp
20007df0  w    O .data	00000028 vtable for usb_serial_class
0000c908  w    F .text.itcm	0000001c UUsbHost::~UUsbHost()
0001c7cc g     F .text.itcm	00000002 __retarget_lock_close_recursive
0000116c g     F .text.itcm	00000208 Adafruit_SSD1306::display(unsigned char, unsigned char)
00009b94 g     F .text.itcm	00000284 UMotorTest::tick()
00018ebc g     F .text.itcm	0000008c .hidden __floatundisf
0000f75c g     F .text.itcm	00000178 USBHost::begin()
2000e664 g     O .bss	00000340 robot
2000e9e4 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00023b8c g     F .text.itcm	000000cc __swsetup_r
0000b1a8 g     F .text.itcm	00000128 UService::setup()
00019240  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
20007d24 g     O .data	00000058 vtable for Adafruit_GFX
20007f28 g     O .data	00000014 vtable for UImu2
00010344 g     F .text.itcm	0000007c USBHost::add_qh_to_periodic_schedule(Pipe_struct*)
0001af14 g     F .text.itcm	000000c8 __sfp
0000e910 g     F .text.itcm	00000058 Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
0001e7a4 g     F .text.itcm	0000005c __copybits
00008bac  w    F .text.itcm	0000001c UMotorTest::~UMotorTest()
20008e84 g     O .data	00000408 __malloc_av_
00018e98 g     F .text.itcm	00000024 .hidden __aeabi_ui2f
2000d6d4 g     O .bss	00000004 __atexit
0001b1cc g     F .text.itcm	00000022 __sread
20009878 g     O .data	0000005a JoystickController::pid_vid_mapping
00002a28  w    F .text.itcm	0000001c EEConfig::~EEConfig()
00004d00 g     F .text.itcm	0000003c UIrDist::sendHelp()
00017934 g     F .text.itcm	00000094 usb_serial_flush_output
0001404c g     F .text.itcm	0000000c JoystickController::rx_callback(Transfer_struct const*)
00019830 g     F .text.itcm	0000000c __malloc_lock
00011370 g     F .text.itcm	0000063a USBHIDParser::parse(unsigned short, unsigned char const*, unsigned long)
20009c00 g     O .data	000002c0 _VectorsRam
0000f5f4  w    F .text.itcm	00000002 USBDriver::timer_event(USBDriverTimer*)
000207d4 g     F .text.itcm	00000054 _fflush_r
00000168 g     F .text.itcm	00000008 getRevisionString()
0001d960 g     F .text.itcm	000001d0 __utf8_mbtowc
00007e98 g     F .text.itcm	00000044 ULog::eePromSaveStatusLog()
00019244 g     F .text.itcm	00000078 _calloc_r
0000499c g     F .text.itcm	000002c0 UImu2::tick()
00008d40 g     F .text.itcm	00000140 UMotorTest::eePromLoad()
0000f3bc g     F .text.itcm	00000234 SPIClass::begin()
2000ec4c g     O .bss	00000001 yield_active_check_flags
0001c7d4 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
2000ec4a g     O .bss	00000001 usb_high_speed
0000a168 g     F .text.itcm	000000d0 URobot::sendState()
00002698 g     F .text.itcm	0000026c UDisplay::tick()
0000b5d0 g     F .text.itcm	000000a4 UServo::sendServoStatus()
0000a360 g     F .text.itcm	00000070 URobot::saveCycleTime()
00004204 g     F .text.itcm	00000050 UImu2::sendHelp()
00011e00 g     F .text.itcm	00000058 USBHub::send_clearstatus_connect(unsigned long)
00006490 g     F .text.itcm	00000040 ULineSensor::sendData(int)
0001b4e8 g     F .text.itcm	000000a4 memset
000185b8 g     F .text.itcm	00000006 __ieee754_sqrtf
0000b84c g     F .text.itcm	000001a0 UServo::tick()
00011008 g     F .text.itcm	000000cc USBHIDParser::sendPacket(unsigned char const*, int)
00016024 g     F .text.itcm	00000010 main
00010f6c g     F .text.itcm	00000018 USBHIDParser::timer_event(USBDriverTimer*)
0000e8b8 g     F .text.itcm	00000058 Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
2000d134 g     O .bss	00000004 __malloc_max_total_mem
0000b674 g     F .text.itcm	00000008 UServo::sendData(int)
0000b488  w    F .text.itcm	0000001c UServo::~UServo()
000025e8 g     F .text.itcm	000000ac UDisplay::setup()
0001c7c4 g     F .text.itcm	00000002 __retarget_lock_init_recursive
202000e0 g     O .bss.dma	00000062 usb_descriptor_buffer
00018ecc g     F .text.itcm	0000007c .hidden __aeabi_l2f
0000e168 g     F .text.itcm	00000024 MPU9250_asukiaaa::accelY()
00024120 g     F .text.itcm	00000018 __swbuf
000036a0 g     F .text.itcm	000000d4 UEncoder::sendVelocity()
0001495c g     F .text.itcm	00000010 USBHost::allocate_Device()
0000bb28 g     F .text.itcm	0000005c USubs::serviceStatus(int)
0001dbc0 g     F .text.itcm	000000be __eucjp_mbtowc
00010ffc g     F .text.itcm	0000000c USBHIDParser::out_callback(Transfer_struct const*)
000064d0 g     F .text.itcm	00000150 ULineSensor::normalize()
0000be70 g     F .text.itcm	0000009c UUSB::decode(char const*)
000015f0 g     F .text.itcm	0000009c UAd::sendStatusLSRaw()
0001b254 g     F .text.itcm	00000008 __sclose
000171fc g     F .text.itcm	00000058 usb_init_serialnumber
00012b94 g     F .text.itcm	00000076 JoystickController::transmitPS3MotionUserFeedbackMsg()
00020694 g     F .text.itcm	00000010 fclose
0000ba18 g     F .text.itcm	00000034 UServo::eePromLoad()
0001ad48 g     F .text.itcm	00000002 _strtol_r
0000e81c g     F .text.itcm	00000002 Adafruit_GFX::startWrite()
0001d890 g     F .text.itcm	00000080 _findenv_r
60002060 g       .text.code	00000000 __init_array_end
00020ba0 g     F .text.itcm	00000cec _dtoa_r
000192dc g     F .text.itcm	00000554 _malloc_r
0001e878 g     F .text.itcm	0000001a __ascii_wctomb
0001277c g     F .text.itcm	00000020 non-virtual thunk to JoystickController::bt_hid_input_begin(unsigned long, unsigned long, int, int)
00018cd0 g     F .text.itcm	0000005a .hidden __aeabi_l2d
000013b0 g     F .text.itcm	00000140 UAd::setup()
00006728 g     F .text.itcm	0000010c ULineSensor::eePromSaveLinesensor()
0000200c g     F .text.itcm	00000010 UCurrent::sendHelp()
0001e894 g     F .text.itcm	0000009e __utf8_wctomb
00021984 g     F .text.itcm	0000001c _fiprintf_r
0000d664 g     F .text.itcm	00000094 ADC::startSingleRead(unsigned char, signed char)
200080bc  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
000151b4 g     F .text.itcm	00000084 EventResponder::triggerEventNotImmediate()
00021898 g     F .text.itcm	0000000c __env_unlock
00015938 g     F .text.itcm	00000054 micros
0001ad94 g     F .text.itcm	00000010 isalnum
0000f608 g     F .text.itcm	00000020 BluetoothController::driver_ready_for_bluetooth(BTHIDInput*)
00001f20 g     F .text.itcm	000000bc UCommand::parse_and_execute_command(char*)
0001d920 g     F .text.itcm	00000014 _mbtowc_r
00018ebc g     F .text.itcm	0000008c .hidden __aeabi_ul2f
00001914 g     F .text.itcm	000000f0 UAsEnc::decode(char const*)
2000d864 g     O .bss	00000004 USBHIDParser::available_hid_drivers_list
0000e7a4 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
0001cdc4 g     F .text.itcm	000000a0 _malloc_trim_r
00023de0 g     F .text.itcm	00000106 _wcsnrtombs_l
6000262c g     O .text.progmem	00000004 string0
000178cc g     F .text.itcm	00000018 usb_serial_write
000038c8 g     F .text.itcm	00000110 UEncoder::eePromLoad()
0000f8d4 g     F .text.itcm	000000bc USBDriverTimer::start(unsigned long)
600017f8  w    F .text.code	00000002 startup_late_hook
2000d6dc g     O .bss	00000018 SWIMUCal
000039d8 g     F .text.itcm	000001f8 UEncoder::updatePose(unsigned long)
0000f604  w    F .text.itcm	00000004 BTHIDInput::claim_bluetooth(BluetoothController*, unsigned long, unsigned char*)
00016288 g     F .text.itcm	000000dc flexpwmFrequency
00018974 g     F .text.itcm	00000010 .hidden __math_check_uflow
00017260  w    F .text.itcm	00000004 usb_serial_class::available()
0001c808 g     F .text.itcm	000002dc strcmp
0000dc94 g     F .text.itcm	0000005c ADC_Module::enableInterrupts(void (*)(), unsigned char)
000018a4 g     F .text.itcm	00000054 UAsEnc::sendHelp()
00009a80 g     F .text.itcm	00000114 UMotorTest::send(UMotorTestMeasurementData*, int, unsigned long)
0000201c  w    F .text.itcm	0000001c UCurrent::~UCurrent()
000237fc g     F .text.itcm	0000001c vfiprintf
0000762c g     F .text.itcm	00000078 ULog::initLogStructure()
0001c7c0 g     F .text.itcm	00000002 __retarget_lock_init
20000000 g     O .data	00000280 endpoint_queue_head
600025fc  w    O .text.progmem	00000016 usb_string_product_name
0000b4a4 g     F .text.itcm	00000044 UServo::sendHelp()
00015890 g     F .text.itcm	000000a8 delay
000241b8 g     F .text.itcm	00000040 .hidden __fixunsdfdi
2000ec2e g     O .bss	00000002 dma_channel_allocated_mask
00006f8c g     F .text.itcm	00000080 ULog::writeAcc(signed char*, int, char*, int)
00024210 g     F .fini	00000000 _fini
0000e2c4 g     F .text.itcm	0000002a TwoWire::write(unsigned char)
60001020 g     O .text.headers	0000000c BootData
00015584 g     F .text.itcm	0000001c Print::printf(char const*, ...)
000168a4 g     F .text.itcm	00000004 Panic_Temp_isr
2000d51c g     O .bss	00000004 _PathLocale
00024188 g     F .text.itcm	00000030 .hidden __fixdfdi
2000eac8 g     O .bss	00000150 usb
0001ab5c g     F .text.itcm	000000a8 strtof
0001aa9c g     F .text.itcm	0000001c strtod_l
0000d588 g     F .text.itcm	00000040 ADC::ADC()
0000b338 g     F .text.itcm	00000044 UService::setSampleTime(long)
00023ee8 g     F .text.itcm	00000024 _wcsnrtombs_r
0001c740 g     F .text.itcm	0000002c _write_r
0000a720 g     F .text.itcm	00000418 URobot::tick()
000152a8  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)
0001669c g     F .text.itcm	0000001c analogWriteRes
0000dc4c g     F .text.itcm	00000046 ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_settings::ADC_REGS_t&)
00009060 g     F .text.itcm	00000200 UMotorTest::estimateFriction(float, float, float, float&)
0001c670 g     F .text.itcm	00000030 setlocale
00018d2c g     F .text.itcm	0000016c .hidden __aeabi_frsub
0000eaa0 g     F .text.itcm	000000d4 Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
0000df88 g     F .text.itcm	00000018 MPU9250_asukiaaa::MPU9250_asukiaaa(unsigned char)
0000c908  w    F .text.itcm	0000001c UUsbHost::~UUsbHost()
000135a0 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::claim_collection(USBHIDParser*, Device_struct*, unsigned long)
0001cd30 g     F .text.itcm	0000000c nanf
00001d54  w    F .text.itcm	0000001c UCommand::~UCommand()
20008d58 g     O .data	00000004 _impure_ptr
0000a238 g     F .text.itcm	0000004c URobot::sendPinValue()
2000a400 g     O .bss	000023c0 usbhost
000206a4 g     F .text.itcm	00000130 __sflush_r
2000949c g     O .data	00000140 Wire
0000bd04 g     F .text.itcm	00000028 USubss::subscribeSendHelp()
00017b94 g     F .text.itcm	00000004 atan2f
00007fb0 g     F .text.itcm	000000c0 UMotor::sendHelp()
20008044 g     O .data	00000014 vtable for UEncoder
0001b07c g     F .text.itcm	00000046 _fwalk_sglue
00015458 g     F .text.itcm	00000070 IntervalTimer::end()
00007e08 g     F .text.itcm	00000090 ULog::setLogFlagDefault()
00005aac g     F .text.itcm	00000008 ULedBand::sendData(int)
00003d78 g     F .text.itcm	0000010c UEncoder::tick()
00004444 g     F .text.itcm	00000030 UImu2::eePromSave()
60002000 g       .text.code	00000000 __preinit_array_end
00012d7c g     F .text.itcm	0000034c JoystickController::setRumble(unsigned char, unsigned char, unsigned char)
00001378  w    F .text.itcm	00000002 USubss::sendHelp()
000071c4 g     F .text.itcm	00000068 ULog::writeMotVolt(signed char*, int, char*, int)
0000dac8 g     F .text.itcm	00000052 ADC_Module::wait_for_cal()
00021ac8 g     F .text.itcm	00000d16 _svfiprintf_r
0001bda4 g     F .text.itcm	00000628 __loadlocale
00000b28 g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
000074c0 g     F .text.itcm	000000fc ULog::writeDistSensor(signed char*, int, char*, int)
0000c698  w    F .text.itcm	000000d4 void std::vector<USubss*, std::allocator<USubss*> >::_M_realloc_insert<USubss* const&>(__gnu_cxx::__normal_iterator<USubss**, std::vector<USubss*, std::allocator<USubss*> > >, USubss* const&)
000033f0 g     F .text.itcm	00000128 UEncoder::setup()
0000de98 g     F .text.itcm	000000b8 MPU9250_asukiaaa::i2cRead(unsigned char, unsigned char, unsigned char, unsigned char*)
000088f0 g     F .text.itcm	00000030 UMotor::eePromSave()
0001d934 g     F .text.itcm	0000002a __ascii_mbtowc
0000d9ec g     F .text.itcm	000000dc ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)
0001e51c g     F .text.itcm	00000064 __ulp
0001b058 g     F .text.itcm	00000024 __fp_unlock_all
00006a84 g     F .text.itcm	0000004c ULog::setup()
00016a60 g     F .text.itcm	0000002c usb_stop_sof_interrupts
00001394  w    F .text.itcm	0000001c UAd::~UAd()
00012658 g     F .text.itcm	00000002 non-virtual thunk to JoystickController::hid_input_begin(unsigned long, unsigned long, int, int)
0000e2a8  w    F .text.itcm	00000018 TwoWire::peek()
0000e2c0  w    F .text.itcm	00000002 TwoWire::flush()
00000170 g     F .text.itcm	0000002c setup
20008cd0 g     O .data	00000084 usb_descriptor_list
00004fd8 g     F .text.itcm	00000100 UIrDist::decode(char const*)
00013990 g     F .text.itcm	00000022 JoystickController::hid_timer_event(USBDriverTimer*)
0000e12c g     F .text.itcm	00000018 MPU9250_asukiaaa::accelUpdate()
00018160 g     F .text.itcm	00000204 sinf
0000075c  w    F .text.itcm	00000002 Print::flush()
2000e650 g     O .bss	00000004 p11
2000801c g     O .data	00000014 vtable for UCurrent
00006244 g     F .text.itcm	00000054 ULineSensor::sendStatusLineSensorLimitsBlack()
2000d9dc g     O .bss	0000003c asenc
2000e654 g     O .bss	00000004 p12a
0000edb0 g     F .text.itcm	000003d4 Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char)
0000ba78 g     F .text.itcm	00000020 USubs::USubs(char const*, char const*)
0001cd20 g     F .text.itcm	00000010 nan
0000c118 g     F .text.itcm	00000060 UUSB::sendInfoAsCommentWithTime(char const*, char const*)
0000f720 g     F .text.itcm	0000000a BluetoothController::useHIDProtocol(bool)
00008e80 g     F .text.itcm	000001e0 UMotorTest::testCurrent(float, float, float, float&)
000209a4 g     F .text.itcm	00000008 localeconv
00002bb8 g     F .text.itcm	00000036 EEConfig::pushByte(unsigned char)
2000e4cc g     O .bss	0000005c motor
000149ac g     F .text.itcm	00000010 USBHost::free_Transfer(Transfer_struct*)
00024010 g     F .text.itcm	00000060 __swhatbuf_r
20058000 g       .text.csf	00000000 _estack
00008c68 g     F .text.itcm	00000058 UMotorTest::sendData(int)
0000be00 g     F .text.itcm	0000003a USubss::addPublistItem(char const*, char const*)
0001497c g     F .text.itcm	00000010 USBHost::allocate_Pipe()
00003000 g     F .text.itcm	0000001c EEConfig::setup()
000178e4 g     F .text.itcm	00000050 usb_serial_write_buffer_free
0000b184  w    F .text.itcm	00000004 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)
0000cd88 g     F .text.itcm	0000005c UUsbHost::setup()
0000c010 g     F .text.itcm	00000084 UUSB::sendUSBstatus()
60001730 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
000005f4 g     F .text.itcm	00000028 AS5X47Spi::AS5X47Spi(unsigned char)
00010d44 g     F .text.itcm	00000228 USBHIDParser::claim(Device_struct*, int, unsigned char const*, unsigned long)
20009294 g     O .data	0000000c __sglue
000175d4 g     F .text.itcm	00000100 usb_serial_configure
0000e2f0 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
00012518 g     F .text.itcm	00000010 JoystickController::release_bluetooth()
00001e88 g     F .text.itcm	00000090 UCommand::sendStatusVersion()
00015568  w    F .text.itcm	0000001c _write
00004094 g     F .text.itcm	00000020 m1EncoderB()
00008804 g     F .text.itcm	00000010 UMotor::sendData(int)
00012738 g     F .text.itcm	00000044 non-virtual thunk to JoystickController::bt_disconnect_collection(Device_struct*)
20009ec0 g       .data	00000000 _edata
00002484 g     F .text.itcm	00000034 UCurrent::logIntervalChanged()
2000ec40 g     O .bss	00000001 external_psram_size
00004054 g     F .text.itcm	00000020 m1EncoderA()
2000806c g     O .data	00000014 vtable for UUsbHost
00023c58 g     F .text.itcm	000000aa __fputwc
00005214  w    F .text.itcm	0000001c ULedBand::~ULedBand()
00017268  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00004254  w    F .text.itcm	0000001c UImu2::~UImu2()
2000d538 g     O .bss	00000001 __lock___at_quick_exit_mutex
0000e780 g     F .text.itcm	0000000c lpi2c1_isr()
0000b190  w    F .text.itcm	00000006 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)
20003c00 g     O .data	0000002a ADC::channel2sc1aADC1
00004528 g     F .text.itcm	0000007c UImu2::sendStatusAcc()
00002c50 g     F .text.itcm	00000026 EEConfig::readByte()
0001498c g     F .text.itcm	00000010 USBHost::free_Pipe(Pipe_struct*)
000112a0 g     F .text.itcm	000000d0 USBHIDParser::control(Transfer_struct const*)
0000bc2c g     F .text.itcm	00000064 USubss::subscribeService()
20009a70 g     O .data	00000080 isr_table_gpio4
00011e58 g     F .text.itcm	00000058 USBHub::send_clearstatus_enable(unsigned long)
00006620 g     F .text.itcm	00000104 ULineSensor::tick()
00002ca0 g     F .text.itcm	00000118 EEConfig::eePromSaveStatus(bool)
0001857c g     F .text.itcm	00000020 .hidden __math_divzerof
00016170 g     F .text.itcm	00000062 ultoa
2000e528 g     O .bss	00000128 motortest
60001788 g     F .text.code	00000068 TwoWire::begin()
0000c424 g     F .text.itcm	00000174 UUSB::tick()
00000ab4 g     F .text.itcm	00000074 Adafruit_SSD1306::drawFastVLine(short, short, short, unsigned short)
00004300 g     F .text.itcm	00000074 UImu2::setup()
00003778 g     F .text.itcm	000000bc UEncoder::sendMotorVelocity()
0000722c g     F .text.itcm	00000098 ULog::writePose(signed char*, int, char*, int)
00005e28  w    F .text.itcm	0000001c ULineSensor::~ULineSensor()
0001b1f4 g     F .text.itcm	0000003e __swrite
00016168 g     F .text.itcm	00000004 operator new(unsigned int)
00015238 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20009290 g     O .data	00000004 __malloc_trim_threshold
00017258  w    F .text.itcm	00000004 usb_serial_class::peek()
00004790 g     F .text.itcm	0000020c UImu2::estimateTilt()
00007edc g     F .text.itcm	0000007c ULog::eePromLoadStatusLog()
2000e390 g     O .bss	0000013c ls
00011eb0 g     F .text.itcm	00000058 USBHub::send_clearstatus_suspend(unsigned long)
000219a0 g     F .text.itcm	00000028 fiprintf
00022870 g     F .text.itcm	00000f8c _vfiprintf_r
00013b58 g     F .text.itcm	00000170 JoystickController::CalcAnalogStick(float&, float&, short, short, bool)
000004e4  w    F .text.itcm	00000110 SPIClass::beginTransaction(SPISettings)
0001dc80 g     F .text.itcm	00000148 __jis_mbtowc
0000f758  w    F .text.itcm	00000002 USBHIDInput::hid_timer_event(USBDriverTimer*)
00018e98 g     F .text.itcm	00000024 .hidden __floatunsisf
0001e3c8 g     F .text.itcm	00000154 __mdiff
000015a8 g     F .text.itcm	00000048 UAd::tickHalfTime()
000188f8 g     F .text.itcm	00000010 .hidden __math_uflow
000017f8 g     F .text.itcm	0000000c adc0_isr()
0000aec8 g     F .text.itcm	00000124 URobot::eePromLoad()
0000114c g     F .text.itcm	0000001e Adafruit_SSD1306::clearDisplay()
0000f990 g     F .text.itcm	00000070 USBDriverTimer::stop()
20008d60 g     O .data	00000120 _impure_data
00002a28  w    F .text.itcm	0000001c EEConfig::~EEConfig()
00000b28 g     F .text.itcm	00000058 Adafruit_SSD1306::Adafruit_SSD1306(unsigned char, unsigned char, TwoWire*, signed char, unsigned long, unsigned long)
0001b028 g     F .text.itcm	0000000c __sfp_lock_release
00018708 g     F .text.itcm	000001a4 atanf
0000b3f4 g     F .text.itcm	00000068 UService::updateActuators()
200021d0 g     O .data	00000101 _ctype_
00016878  w    F .text.itcm	00000004 _read
60002000 g       .text.code	00000000 __init_array_start
00019240  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00012c0c g     F .text.itcm	00000170 JoystickController::setLEDs(unsigned char, unsigned char, unsigned char)
0001c7d0 g     F .text.itcm	00000002 __retarget_lock_acquire
00001ca0 g     F .text.itcm	000000b4 UCommand::sendHelp()
20009434 g     O .data	00000004 F_BUS_ACTUAL
00001b08 g     F .text.itcm	00000034 UAsEnc::initEnc()
0001c7e0 g     F .text.itcm	00000002 __retarget_lock_release
2000dc38 g     O .bss	00000004 em_rx_tx
0001324c g     F .text.itcm	00000008 non-virtual thunk to JoystickController::claim_bluetooth(BluetoothConnection*, unsigned long, unsigned char*, int)
000152a0  w    F .text.itcm	00000002 teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)
00003610 g     F .text.itcm	0000008c UEncoder::sendPose()
00011cb0 g     F .text.itcm	0000005e USBHub::send_getstatus(unsigned long)
00005a20 g     F .text.itcm	0000008c ULedBand::sendLedsData()
00007998 g     F .text.itcm	000000bc ULog::addMsgLog(char const*)
0000be3c  w    F .text.itcm	00000034 UUSB::~UUSB()
0000d794 g     F .text.itcm	00000258 ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)
00005214  w    F .text.itcm	0000001c ULedBand::~ULedBand()
00006144 g     F .text.itcm	00000058 ULineSensor::sendLineSensorStatus()
2000d528 g     O .bss	00000001 __lock___dd_hash_mutex
00023f38 g     F .text.itcm	000000d8 __smakebuf_r
2000d52c g     O .bss	00000001 __lock___tz_mutex
00000000 g       .text.itcm	00000000 _stext
00012528 g     F .text.itcm	00000070 JoystickController::hid_process_control(Transfer_struct const*)
00004d3c  w    F .text.itcm	0000001c UIrDist::~UIrDist()
00015100 g     F .text.itcm	000000b4 DMAChannel::begin(bool)
00018570 g     F .text.itcm	0000000c .hidden __math_oflowf
20009874 g     O .data	00000004 IntervalTimer::nvic_priorites
0000b188  w    F .text.itcm	00000006 teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)
0001cc40 g     F .text.itcm	000000dc strlen
00013428 g     F .text.itcm	00000008 non-virtual thunk to JoystickController::connectionComplete()
0001496c g     F .text.itcm	00000010 USBHost::free_Device(Device_struct*)
000124e4 g     F .text.itcm	0000000e JoystickController::hid_input_end()
000061f0 g     F .text.itcm	00000054 ULineSensor::sendStatusLineSensorLimitsWhite()
0000b2d0 g     F .text.itcm	00000068 UService::isSampleTime()
0000a3d0 g     F .text.itcm	00000238 URobot::batteryMonitoring()
0000ddf0 g     F .text.itcm	0000007c ADC_Module::startSingleRead(unsigned char)
00006a68  w    F .text.itcm	0000001c ULog::~ULog()
0000b19c  w    F .text.itcm	0000000c IntervalTimer::~IntervalTimer()
0001d114 g     F .text.itcm	00000594 __gethex
600025fc g     O .text.progmem	00000016 usb_string_product_name_default
2000cfd0 g     O .bss	000000f8 imu2
0001b2a8 g     F .text.itcm	0000001c vdprintf
000018f8  w    F .text.itcm	0000001c UAsEnc::~UAsEnc()
00020a68 g     F .text.itcm	0000000a __assert
00022858 g     F .text.itcm	00000016 __sprint_r
00002a44 g     F .text.itcm	00000044 EEConfig::EEConfig()
0001b58c g     F .text.itcm	000000cc strchr
000126c8 g     F .text.itcm	0000003c JoystickController::bt_disconnect_collection(Device_struct*)
00012390 g     F .text.itcm	0000014a JoystickController::hid_input_data(unsigned long, long)
600017f4  w    F .text.code	00000002 startup_middle_hook
00018c7c g     F .text.itcm	00000042 .hidden __aeabi_f2d
000124f8 g     F .text.itcm	00000002 JoystickController::control(Transfer_struct const*)
200012c8 g     O .data	00000060 .hidden __inv_pio4
60001800 g     F .text.code	00000110 configure_cache
00015efc g     F .text.itcm	0000001e eeprom_write_block
0000c8cc g     F .text.itcm	0000003c UUsbHost::sendHelp()
0000f67c g     F .text.itcm	000000a4 BluetoothController::sendL2CapCommand(unsigned char*, unsigned char, int)
0000239c g     F .text.itcm	00000064 UCurrent::sendSupplyCurrent()
20007e18 g     O .data	000000d4 vtable for JoystickController
0000700c g     F .text.itcm	00000080 ULog::writeGyro(signed char*, int, char*, int)
20007fe0 g     O .data	00000014 vtable for UIrDist
00001e38 g     F .text.itcm	00000050 UCommand::getCompileDate()
00010c54 g     F .text.itcm	00000080 USBHost::disconnect_Device(Device_struct*)
00009708 g     F .text.itcm	0000013c UMotorTest::estimateMotorParams()
0001e864 g     F .text.itcm	00000014 _wctomb_r
0002188c g     F .text.itcm	0000000c __env_lock
0000a030  w    F .text.itcm	0000001c URobot::~URobot()
00008bac  w    F .text.itcm	0000001c UMotorTest::~UMotorTest()
0000a284 g     F .text.itcm	00000060 URobot::sendTiming()
0000b7ec g     F .text.itcm	00000060 UServo::decode(char const*)
000189bc g     F .text.itcm	0000027a .hidden __subdf3
60002000 g       .text.code	00000000 __preinit_array_start
000171dc g     F .text.itcm	0000001c usb_receive
000072c4 g     F .text.itcm	00000084 ULog::writeTiming(signed char*, int, char*, int)
00007d20 g     F .text.itcm	000000e8 ULog::tick()
0001dfbc g     F .text.itcm	00000060 __lo0bits
0000137c  w    F .text.itcm	00000004 USubss::decode(char const*)
00006b98 g     F .text.itcm	00000008 ULog::stopLogging()
0001050c g     F .text.itcm	0000021c USBHost::delete_Pipe(Pipe_struct*)
00031400 g       *ABS*	00000000 _flashimagelen
0000f754  w    F .text.itcm	00000004 USBHIDInput::hid_process_out_data(Transfer_struct const*)
0000bbcc g     F .text.itcm	00000060 USubss::subscribeDecode(char const*)
0000ec8c g     F .text.itcm	00000030 Adafruit_GFX::Adafruit_GFX(short, short)
00004270 g     F .text.itcm	00000090 UImu2::initMpu()
000189a8 g     F .text.itcm	0000000a __aeabi_atexit
000124fc g     F .text.itcm	00000002 JoystickController::tx_callback(Transfer_struct const*)
00017aa0 g     F .text.itcm	00000024 rtc_get
0000f2bc g     F .text.itcm	0000000c Adafruit_GFX::setTextSize(unsigned char)
000218f0 g     F .text.itcm	00000058 wcrtomb
00000218 g     F .text.itcm	00000030 AS5X47::readAngle()
20200000 g     O .bss.dma	000000d8 displayMemory
0000f5f0  w    F .text.itcm	00000002 BTHIDInput::sdp_command_completed(bool)
000209b0 g     F .text.itcm	00000078 frexp
00018d38 g     F .text.itcm	00000160 .hidden __addsf3
70000000 g       .bss.extram	00000000 _extram_start
0001527c g     F .text.itcm	00000004 pendablesrvreq_isr
00000758  w    F .text.itcm	00000004 Print::availableForWrite()
200092a0 g     O .data	0000016c __global_locale
00015b94 g     F .text.itcm	00000018 eeprom_read_word
00007348 g     F .text.itcm	000000b4 ULog::writeExtra(signed char*, int, char*, int)
000103c0 g     F .text.itcm	0000014c USBHost::new_Pipe(Device_struct*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long)
00013cc8 g     F .text.itcm	00000384 JoystickController::rx_data(Transfer_struct const*)
00006408 g     F .text.itcm	00000088 ULineSensor::sendLineSensorGain()
20007ff4 g     O .data	00000014 vtable for EEConfig
00001374  w    F .text.itcm	00000002 USubss::sendData(int)
000176d4 g     F .text.itcm	000000e0 usb_serial_read
2000d540 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000e894 g     F .text.itcm	00000022 Adafruit_GFX::setRotation(unsigned char)
00023d6c g     F .text.itcm	00000074 fputwc
00017120 g     F .text.itcm	00000064 usb_config_tx
0001687c  w    F .text.itcm	00000006 _close
0000cde8 g     F .text.itcm	000003e4 UUsbHost::tick()
000192cc g     F .text.itcm	00000010 free
0001de28 g     F .text.itcm	000000a4 __multadd
2000d0c8 g     O .bss	00000020 service
000016d4 g     F .text.itcm	00000124 UAd::adInterrupt(int)
0001de14 g     F .text.itcm	00000012 _Bfree
00008a50 g     F .text.itcm	0000015c UMotorTest::decode(char const*)
000185c0 g     F .text.itcm	00000148 __ieee754_atan2f
0001d910 g     F .text.itcm	00000010 _getenv_r
20009b50  w    O .data	00000016 usb_string_serial_number


